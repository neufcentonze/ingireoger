<head>
  <!-- Autres liens et scripts -->
  <script src="https://unpkg.com/lucide@latest/dist/lucide.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      lucide.createIcons();
    });
  </script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Acme&display=swap" rel="stylesheet">

  <% const tendancesGames=games.filter(game=> game.type === 'tendances');
    const classiqueGames = games.filter(game => game.type === 'classique');
    const originalsGames = games.filter(game => game.type === 'originals');
    %>
</head>

<h2
  style="color: #fff; margin-left: 20px; display: flex; align-items: center; font-size: 18px; margin-top: 10px; margin-bottom: -5px;">
  <i data-lucide="gift" style="margin-right: 10px; height: 20px;"></i>
  Promotions
</h2>
<section class="promotions-wrapper">
  <div class="promo-inner">
    <div class="promotions-scroll-container fixed-width" id="promoScroll">
      <% const promos=[ 
      { 
        id: "inscription" , slug: "depot-double" , label: "Offre d'inscription" ,
        title: "Votre premier dépôt est doublé !" , desc: "Votre 1er dépôt doublé jusqu'à 500 €" , 
      },
      { 
        id: "tirage" ,
        slug: "tirage-mensuel" , label: "Tirage au sort" , title: "Chaque mise change tout !" ,
        desc: "10 000 € à gagner chaque mois." , 
      },
      { 
        id: "classement" , slug: "classement" , label: "Promotion" ,
        title: "Surpasse les autres au classement !" , desc: "Jusqu'à 3 000 € en jeu chaque semaine." , 
      },     
      ]; %>

        <% promos.forEach(promo=> { %>
          <div class="promo-card promo-id-<%= promo.id %>">
            <div class="promo-text">
              <span class="promo-label">
                <%= promo.label %>
              </span>
              <h3>
                <%= promo.title %>
              </h3>
              <p>
                <%= promo.desc %>
              </p>
              <a href="/promotions/<%= promo.slug %>" class="promo-btn">Voir</a>

            </div>
          </div>
          <% }) %>
    </div>

    <!-- Flèches -->
    <button class="arrow left" id="leftArrow">&#10094;</button>
    <button class="arrow right" id="rightArrow">&#10095;</button>
  </div>
</section>

<h2
  style="color: #fff; margin-left: 20px; display: flex; align-items: center; font-size: 18px; margin-top: 10px; margin-bottom: -5px;">
  <i data-lucide="flame" style="margin-right: 10px; height: 20px;"></i>
  Tendances
</h2>
<section class="games-wrapper">
  <div class="game-inner">
    <div class="games-carousel" id="gameScroll">
      <% tendancesGames.forEach(game => { %>
        <div class="game-card" style="position: relative;">
          <a href="/game/<%= game.name %>" draggable="false">
            <img src="<%= game.image %>" alt="<%= game.name %>" draggable="false">
          </a>
        </div>
        <% }) %>
    </div>
  </div>
</section>

<h2
  style="color: #fff; margin-left: 20px; display: flex; align-items: center; font-size: 18px; margin-top: 10px; margin-bottom: -5px;">
  <i data-lucide="gamepad-2" style="margin-right: 10px; height: 20px;"></i>
  Classique
</h2>
<section class="games-wrapper">
  <div class="game-inner">
    <div class="games-carousel" id="gameScroll">
      <% classiqueGames.forEach(game => { %>
        <div class="game-card" style="position: relative;">
          <a href="/game/<%= game.name %>" draggable="false">
            <img src="<%= game.image %>" alt="<%= game.name %>" draggable="false">
          </a>
        </div>
        <% }) %>
    </div>
  </div>
</section>

<h2
  style="color: #fff; margin-left: 20px; display: flex; align-items: center; font-size: 18px; margin-top: 10px; margin-bottom: -5px;">
  <i data-lucide="aperture" style="margin-right: 10px; height: 20px;"></i>
  Originals
</h2>
<section class="games-wrapper">
  <div class="game-inner">
    <div class="games-carousel" id="gameScroll">
      <% originalsGames.forEach(game => { %>
        <div class="game-card" style="position: relative;">
          <a href="/game/<%= game.name %>" draggable="false">
            <img src="<%= game.image %>" alt="<%= game.name %>" draggable="false">
          </a>
        </div>
        <% }) %>
    </div>
  </div>
</section>


<h2
  style="color: #fff; margin-left: 20px; display: flex; align-items: center; font-size: 18px; margin-top: 10px; margin-bottom: -5px;">
  <i data-lucide="chart-bar" style="margin-right: 10px; height: 20px;"></i>
  Transactions
</h2>

<div class="transactions-table" id="transactionTableStyled">
  <div class="table-header">
    <div>Jeu</div>
    <div class="mobile-hide">Utilisateur</div>
    <div class="mobile-hide">Heure</div>
    <div class="mobile-hide">Pari</div>
    <div>Multiplicateur</div>
    <div>Paiement</div>
  </div>
</div>


<script>
  const socket = io();

  socket.on('connect', () => {
    console.log('Connecté au serveur Socket.IO');
  });

  socket.on('initialTransactions', (transactions) => {
    console.log('Transactions initiales reçues:', transactions);
    transactions.forEach(transaction => {
      addTransaction(transaction.game, transaction.user, transaction.time, transaction.betAmount, transaction.multiplier, transaction.payout);
    });
  });

  socket.on('newTransaction', (transaction) => {
    console.log('Nouvelle transaction reçue:', transaction);
    addTransaction(transaction.game, transaction.user, transaction.time, transaction.betAmount, transaction.multiplier, transaction.payout);
  });

  document.getElementById('leftArrow').addEventListener('click', () => {
    const container = document.getElementById('promoScroll');
    container.scrollBy({ left: -600, behavior: 'smooth' });
  });

  document.getElementById('rightArrow').addEventListener('click', () => {
    const container = document.getElementById('promoScroll');
    container.scrollBy({ left: 600, behavior: 'smooth' });
  });

  document.addEventListener('DOMContentLoaded', () => {
    const wrapper = document.querySelector('.promotions-wrapper');
    const cards = wrapper?.querySelectorAll('.promo-card');

    if (cards && cards.length <= 3) {
      wrapper.classList.add('no-arrows');
    }
  });

  function addTransaction(game, user, time, betAmount, multiplier, payout) {
    const table = document.getElementById('transactionTableStyled');

    const row = document.createElement('div');
    row.classList.add('table-row');

    row.innerHTML = `
      <div>${game}</div>
      <div class="mobile-hide">${user}</div>
      <div class="mobile-hide">${time}</div>
      <div class="mobile-hide">${formatAmountWithIcon(betAmount)}</div>
      <div>${multiplier}</div>
      <div class="${parseFloat(payout) >= 0 ? 'positive' : 'negative'}">${formatAmountWithIcon(payout)}</div>
    `;
    // Ajoute en haut
    table.insertBefore(row, table.children[1]);

    // Garde seulement les 10 derniers
    const rows = table.querySelectorAll('.table-row');
    if (rows.length > 10) {
      table.removeChild(rows[rows.length - 1]);
    }
  }

  function formatAmountWithIcon(amountStr) {
    let [value, currency] = amountStr.split(" ");
    const iconPath = `/images/${currency}.` + (currency === "eth" ? "svg" : "png");

    const isNegative = value.startsWith("-");
    value = value.replace("-", "");

    return `
    ${isNegative ? '-' : ''}
    ${value}
    <img src="${iconPath}" alt="${currency}" style="width: 16px; vertical-align: middle; margin-left: 4px;">
  `;
  }

  (() => {
    const container = document.getElementById('promoScroll');
    let startX = 0;
    let scrollStart = 0;
    const cardWidth = container.offsetWidth; // largeur visible d'une carte

    container.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
      scrollStart = container.scrollLeft;
    });

    container.addEventListener('touchend', (e) => {
      const deltaX = e.changedTouches[0].clientX - startX;
      const threshold = cardWidth * 0.3; // 30%

      let direction = 0;
      if (Math.abs(deltaX) > threshold) {
        direction = deltaX < 0 ? 1 : -1; // 1 = droite, -1 = gauche
      }

      const nextScrollLeft = Math.round(scrollStart / cardWidth + direction) * cardWidth;

      container.scrollTo({
        left: nextScrollLeft,
        behavior: 'smooth'
      });
    });
  })();

  (() => {
    const container = document.getElementById('gameScroll');
    if (!container) return;

    let startX = 0;
    let scrollStart = 0;

    container.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
      scrollStart = container.scrollLeft;
    });

    container.addEventListener('touchend', (e) => {
      const deltaX = e.changedTouches[0].clientX - startX;
      const cardWidth = container.querySelector('.game-card').offsetWidth + 16;
      const threshold = cardWidth * 0.3;

      let direction = 0;
      if (Math.abs(deltaX) > threshold) {
        direction = deltaX < 0 ? 1 : -1;
      }

      const nextScrollLeft = Math.round(scrollStart / cardWidth + direction) * cardWidth;

      container.scrollTo({
        left: nextScrollLeft,
        behavior: 'smooth'
      });
    });
  })();

</script>