<!DOCTYPE html>
<html lang="fr">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>
    <%= title || "Djelo" %>
  </title>

  <!-- Styles -->
  <link rel="stylesheet" href="/style/main.css" />
  <link rel="stylesheet" href="/style/header.css" />
  <link rel="stylesheet" href="/style/sidebar.css" />
  <link rel="stylesheet" href="/style/modals.css" />
  <% if (showFooter) { %>
    <link rel="stylesheet" href="/style/footer.css" />
    <% } %>

      <!-- Icônes Lucide -->
      <script src="https://unpkg.com/lucide@latest"></script>
</head>

<body>
  <!-- Error / Success -->
  <div id="globalMessage" class="floating-msg" style="display: none;"></div>

  <!-- 🔝 HEADER -->
  <%- include('../partials/header') %>

    <!-- 🧱 WRAPPER PRINCIPAL -->
    <main class="main-wrapper">
      <!-- 📂 SIDEBAR -->
      <%- include('../partials/sidebar') %>

        <!-- 📦 CONTENU -->
        <div class="main-content">
          <%- body %>
        </div>
    </main>

    <!-- ⬇️ FOOTER -->
    
    <% if (showFooter) { %>
      <%- include('../partials/footer') %>
        <% } %>

          <!-- 🔐 LOGIN MODAL -->
          <%- include('../partials/modal', { id: 'loginModal' , title: 'Connexion' , width: '350px' ,
            rawLogo: '<i data-lucide="key-round"></i>' , body: ` <form id="loginForm">
            <input type="email" name="email" placeholder="Email" required />
            <input type="password" name="password" placeholder="Mot de passe" required />
            <button type="submit">Se connecter</button>
            </form>
            <div id="loginMsg" class="modal-msg"></div>
            `
            }) %>

            <!-- 📝 REGISTER MODAL -->
            <%- include('../partials/modal', { id: 'registerModal' , title: 'Inscription' , width: '350px' ,
              rawLogo: '<i data-lucide="key-round"></i>' , body: ` <form id="registerForm">
              <input type="email" name="email" placeholder="Email" required />
              <input type="text" name="username" placeholder="Nom d'utilisateur" required />
              <input type="password" name="password" placeholder="Mot de passe" required />
              <button type="submit">S'inscrire</button>
              </form>
              <div id="registerMsg" class="modal-msg"></div>
              `
              }) %>

              <!-- 📝 CRYPTO DETAILS MODAL -->
              <%- include('../partials/modal', { id: 'soldeDetailsModal' , title: 'Solde Total' , width: '350px' ,
                rawLogo: '<i data-lucide="user-round-search"></i>' , body: ` <div style="margin-bottom: 20px;">
                <div style="display: flex; justify-content: space-between; font-weight: bold; margin-bottom: 5px;">
                  <span>Solde Total</span>
                  <span>0.00€</span>
                </div>
                <div
                  style="border: 1px solid #ccc; padding: 15px; display: flex; justify-content: space-between; align-items: center; border-radius: 6px; background: #1a1a1a;">
                  <input type="text" id="soldeTotalInput" value="0.00000000" readonly
                    style="background: none; border: none; color: #fff; font-size: 16px; width: 100%;">
                  <i data-lucide="bitcoin" style="font-size: 24px; margin-left: 10px;"></i>
                </div>
                </div>

                <div style="margin-bottom: 20px;">
                  <div style="display: flex; justify-content: space-between; font-weight: bold; margin-bottom: 5px;">
                    <span>Solde</span>
                    <span>0.00€</span>
                  </div>
                  <div
                    style="border: 1px solid #ccc; padding: 15px; display: flex; justify-content: space-between; align-items: center; border-radius: 6px; background: #1a1a1a;">
                    <input type="text" id="soldeInput" value="0.00000000" readonly
                      style="background: none; border: none; color: #fff; font-size: 16px; width: 100%;">
                    <i data-lucide="dollar-sign" style="font-size: 24px; margin-left: 10px;"></i>
                  </div>
                </div>

                <div>
                  <div style="display: flex; justify-content: space-between; font-weight: bold; margin-bottom: 5px;">
                    <span>Solde Bonus</span>
                    <span>0.00€</span>
                  </div>
                  <div
                    style="border: 1px solid #ccc; padding: 15px; display: flex; justify-content: space-between; align-items: center; border-radius: 6px; background: #1a1a1a;">
                    <input type="text" id="soldeBonusInput" value="0.00000000" readonly
                      style="background: none; border: none; color: #fff; font-size: 16px; width: 100%;">
                    <i data-lucide="gift" style="font-size: 24px; margin-left: 10px;"></i>
                  </div>
                </div>
                `
                }) %>


              <!-- 🔧 JS LOGIQUE UI -->
              <script>
                function isMobile() {
                  return window.innerWidth <= 768;
                }

                document.addEventListener('DOMContentLoaded', () => {
                  const sidebar = document.querySelector('.sidebar');
                  const toggleSidebarBtn = document.getElementById('toggleSidebar');

                  if (isMobile()) {
                    sidebar?.classList.add('sidebar--collapsed');
                  }

                  toggleSidebarBtn?.addEventListener('click', () => {
                    if (isMobile()) {
                      sidebar?.classList.toggle('hidden-mobile');
                    } else {
                      sidebar?.classList.toggle('sidebar--collapsed');
                    }
                  });

                  document.querySelectorAll('.sidebar-toggle').forEach(el => {
                    el.addEventListener('click', (e) => {
                      const id = el.dataset.id;
                      const link = el.dataset.link;

                      if (isMobile()) {
                        window.location.href = link;
                        return;
                      }

                      if (sidebar.classList.contains('sidebar--collapsed')) {
                        sidebar.classList.remove('sidebar--collapsed');
                        setTimeout(() => {
                          document.getElementById('submenu-' + id)?.classList.toggle('open');
                          el.closest('.sidebar-section')?.classList.toggle('open');
                        }, 150);
                      } else {
                        document.getElementById('submenu-' + id)?.classList.toggle('open');
                        el.closest('.sidebar-section')?.classList.toggle('open');
                      }

                      e.preventDefault();
                    });
                  });

                  const footer = document.querySelector('.footer-bloc');
                  if (footer) {
                    window.addEventListener('scroll', () => {
                      const atBottom = window.innerHeight + window.scrollY >= document.body.offsetHeight - 80;
                      footer.classList.toggle('visible', atBottom);
                    });
                  }

                  lucide.createIcons();
                });
              </script>

              <script>
                function openModal(id) {
                  document.getElementById(id).style.display = 'block';
                }

                function closeModal(id) {
                  document.getElementById(id).style.display = 'none';
                }

                document.getElementById("openLogin")?.addEventListener("click", (e) => {
                  e.preventDefault();
                  openModal("loginModal");
                });

                document.getElementById("openRegister")?.addEventListener("click", (e) => {
                  e.preventDefault();
                  openModal("registerModal");
                });

                document.getElementById("loginForm")?.addEventListener("submit", async (e) => {
                  e.preventDefault();
                  const data = {
                    email: e.target.email.value,
                    password: e.target.password.value
                  };
                  const res = await fetch("/auth/login", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(data)
                  });
                  const result = await res.json();

                  showMessage("globalMessage", result.message, result.success);

                  if (result.success) setTimeout(() => location.reload(), 1000);
                });

                document.getElementById("registerForm")?.addEventListener("submit", async (e) => {
                  e.preventDefault();

                  const email = e.target.email.value.trim();
                  const username = e.target.username.value.trim();
                  const password = e.target.password.value;

                  try {
                    const res = await fetch("/auth/register", {
                      method: "POST",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify({ email, username, password })
                    });

                    const result = await res.json();
                    showMessage("globalMessage", result.message, result.success);

                    if (result.success) setTimeout(() => location.reload(), 1000);
                  } catch (err) {
                    showMessage("globalMessage", "Erreur inconnue", false);
                  }
                });
              </script>

              <script>
                function handleSoldeClick(el) {
                  const chevron = el.querySelector('.solde-chevron');
                  const isOpen = chevron.getAttribute('data-lucide') === 'chevron-down';
                  chevron.setAttribute('data-lucide', isOpen ? 'chevron-up' : 'chevron-down');
                  lucide.createIcons();
                  el.classList.toggle('open');
                }
              </script>

              <script>
                function getSelectedCrypto() {
                  // Trouve le conteneur visible (mobile ou PC)
                  const activeSoldeBox = document.querySelector('.solde-container');
                  if (!activeSoldeBox) return 'btc';

                  // Cherche l'icône actuellement affichée dans la box
                  const icon = activeSoldeBox.querySelector('.solde-crypto-icon');
                  if (!icon) return 'btc';

                  // Déduit la crypto à partir du chemin d'image (ex: /images/btc.png)
                  const src = icon.getAttribute('src');
                  if (!src) return 'btc';

                  if (src.includes('btc')) return 'btc';
                  if (src.includes('eth')) return 'eth';
                  if (src.includes('sol')) return 'sol';
                  if (src.includes('ltc')) return 'ltc';
                  console.log('Selected crypto:', src);
                  return 'btc'; // fallback
                }

                function openSoldeDetailsModal() {
                  const selectedCrypto = getSelectedCrypto();
                  loadCryptoDetails(selectedCrypto);

                  const modal = document.getElementById('soldeDetailsModal');
                  if (modal) {
                    modal.style.display = 'block'; // ou .classList.add('show') selon ton système
                  }
                }

                async function loadCryptoDetails(crypto) {
                  try {
                    const res = await fetch(`/api/cryptoDetail?crypto=${crypto}`);
                    const data = await res.json();

                    const suffix = crypto.toUpperCase();
                    document.getElementById('soldeTotalInput').value = `${data.total} ${suffix}`;
                    document.getElementById('soldeInput').value = `${data.solde} ${suffix}`;
                    document.getElementById('soldeBonusInput').value = `${data.bonus} ${suffix}`;
                  } catch (err) {
                    console.error('Erreur lors du chargement des détails crypto:', err);
                  }
                }
              </script>

              <script>
                function handleSoldeClick(el) {
                  const chevron = el.querySelector('.solde-chevron');
                  const isOpen = chevron.getAttribute('data-lucide') === 'chevron-down';
                  chevron.setAttribute('data-lucide', isOpen ? 'chevron-up' : 'chevron-down');
                  lucide.createIcons();
                  el.classList.toggle('open');
                }
              </script>

              <script>
                function getSelectedCrypto() {
                  // Trouve le conteneur visible (mobile ou PC)
                  const activeSoldeBox = document.querySelector('.solde-container');
                  if (!activeSoldeBox) return 'btc';

                  // Cherche l'icône actuellement affichée dans la box
                  const icon = activeSoldeBox.querySelector('.solde-crypto-icon');
                  if (!icon) return 'btc';

                  // Déduit la crypto à partir du chemin d'image (ex: /images/btc.png)
                  const src = icon.getAttribute('src');
                  if (!src) return 'btc';

                  if (src.includes('btc')) return 'btc';
                  if (src.includes('eth')) return 'eth';
                  if (src.includes('sol')) return 'sol';
                  if (src.includes('ltc')) return 'ltc';
                  console.log('Selected crypto:', src);
                  return 'btc'; // fallback
                }

                function openSoldeDetailsModal() {
                  const selectedCrypto = getSelectedCrypto();
                  loadCryptoDetails(selectedCrypto);

                  const modal = document.getElementById('soldeDetailsModal');
                  if (modal) {
                    modal.style.display = 'block'; // ou .classList.add('show') selon ton système
                  }
                }

                async function loadCryptoDetails(crypto) {
                  try {
                    const res = await fetch(`/api/cryptoDetail?crypto=${crypto}`);
                    const data = await res.json();

                    const suffix = crypto.toUpperCase();
                    document.getElementById('soldeTotalInput').value = `${data.total} ${suffix}`;
                    document.getElementById('soldeInput').value = `${data.solde} ${suffix}`;
                    document.getElementById('soldeBonusInput').value = `${data.bonus} ${suffix}`;
                  } catch (err) {
                    console.error('Erreur lors du chargement des détails crypto:', err);
                  }
                }
              </script>

              <script src="/js/showMessage.js"></script>

              <script>
                document.addEventListener('DOMContentLoaded', () => {
                  // Attacher les événements de clic pour ouvrir les modales
                  document.getElementById("openLogin")?.addEventListener("click", (e) => {
                    e.preventDefault();
                    openModal("loginModal");
                  });

                  document.getElementById("openRegister")?.addEventListener("click", (e) => {
                    e.preventDefault();
                    openModal("registerModal");
                  });
                });
              </script>

              <script>
                document.querySelectorAll('.solde-option').forEach(option => {
                  option.addEventListener('click', () => {
                    const container = option.closest('.solde-container');
                    const soldeBox = container.querySelector('.solde-box');
                    const newAmount = option.dataset.amount?.slice(0, 10) || '0.00000000';
                    const newIcon = option.dataset.icon || '/images/btc.png';

                    soldeBox.querySelector('.solde-amount').textContent = newAmount;
                    soldeBox.querySelector('.solde-crypto-icon').src = newIcon;

                    container.classList.remove('open');

                    const chevron = soldeBox.querySelector('.solde-chevron');
                    if (chevron) {
                      chevron.setAttribute('data-lucide', 'chevron-down');
                      lucide.createIcons();
                    }
                  });
                });

                // Clic en dehors => ferme les dropdowns
                document.addEventListener('click', (e) => {
                  const isInside = e.target.closest('.solde-container');
                  if (!isInside) {
                    document.querySelectorAll('.solde-container.open').forEach(container => {
                      container.classList.remove('open');
                      const chevron = container.querySelector('.solde-chevron');
                      if (chevron) {
                        chevron.setAttribute('data-lucide', 'chevron-down');
                        lucide.createIcons();
                      }
                    });
                  }
                });
              </script>
</body>

</html>