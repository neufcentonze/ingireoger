<script>
    // expose au client
    window.currentSymbol = '<%= currentSymbol %>';
    window.betRate = <%= rate %>;
    window.allRates = <% - JSON.stringify(allRates) %>;
    // <%- JSON.stringify(allRates) %>; a modif comme ca si alt shift f (bug)

    function round8(x) {                // 8 décimales, trim des zéros
        return (+x).toFixed(8).replace(/\.?0+$/, '');
    }

    /* ------------------------------------------------------------------
       Gestion des boutons ½ / 2× / Max
    ------------------------------------------------------------------*/
    document.addEventListener('DOMContentLoaded', () => {
        const input = document.querySelector('.bet-input input');
        const eurSpan = document.querySelector('.bet-eur-value');
        const betBtns = document.querySelector('.bet-buttons');
        const soldeBox = document.querySelector('.solde-container .solde-box');

        betBtns.addEventListener('click', e => {
            if (e.target.tagName !== 'BUTTON') return;     // clic à côté → ignore
            const label = e.target.textContent.trim();
            let value = parseFloat(input.value.replace(',', '.')) || 0;

            /* ----- calcule la nouvelle valeur crypto ----- */
            if (label === '½') value = value / 2;
            else if (label === '2×') value = value * 2;
            else {                   // Max
                // récupère le solde affiché dans l’entête (ou autre source serveur)
                const amountStr = soldeBox?.querySelector('.solde-amount')?.textContent || '0';
                value = parseFloat(amountStr.replace(',', '.')) || 0;
            }

            /* on borne à 8 décimales, pas de négatif */
            value = Math.max(0, value);
            input.value = round8(value);

            /* ----- rafraîchit le montant € ----- */
            if (typeof window.updateEurValue === 'function') {
                window.updateEurValue();
            }
        });
    });
</script>

<div class="game-layout">
    <!-- Conteneur des deux zones principales : config + jeu -->
    <div class="game-main">
        <!-- 1 – Configuration du jeu -->
        <aside class="game-config">
            <div class="mode-switch">
                <button class="mode-btn active" data-mode="manuel">Manuel</button>
                <button class="mode-btn" data-mode="auto">Auto</button>
            </div>

            <div class="bet-amount">
                <div class="bet-amount-header">
                    <label>Montant du Pari</label>
                    <span class="bet-eur-value">0,00 €</span>
                </div>

                <div class="bet-input">
                    <input type="text" value="0.00000000" />

                    <div class="bet-buttons">
                        <button>½</button>
                        <button>2×</button>
                        <button class="max">Max</button>
                    </div>
                </div>
            </div>

            <!-- Ici tu injectes tes options spécifiques au jeu : -->
            <!-- chaque bloc avec la classe `.game-option` sera espacé automatiquement -->
            <% if (game==='dice' ) { %>
                <div class="game-option dice-options" id="diceOptions">
                    <label>Choisissez les faces du dé</label>
                    <div class="dice-btns">
                        <button class="dice-btn" data-value="1">1</button>
                        <button class="dice-btn" data-value="2">2</button>
                        <button class="dice-btn" data-value="3">3</button>
                        <button class="dice-btn" data-value="4">4</button>
                        <button class="dice-btn" data-value="5">5</button>
                        <button class="dice-btn" data-value="6">6</button>
                    </div>
                </div>

                <div class="game-option potential-gain" id="dicePotentialGain">
                    <div class="bet-amount-header">
                        <label>Gain Potentiel (<span id="diceMultiplier">x0</span>)</label>
                        <span id="diceEuro" class="bet-eur-value">0,00 €</span>
                    </div>

                    <div class="bet-input potential-display">
                        <input id="diceCryptoAmount" type="text" value="0.00000000" disabled />
                        <div class="crypto-icon" id="diceCryptoIcon"></div>
                    </div>
                </div>


                <% } %>

                    <% if (game ==='tower') { %>
                        <div class="game-option tower-difficulty">
                            <label for="towerDifficulty">Difficulté</label>
                            <select id="towerDifficulty">
                                <option value="easy">Facile</option>
                                <option value="medium" selected>Moyen</option>
                                <option value="hard">Difficile</option>
                                <option value="insane">Insane</option>
                                <option value="master">Expert</option>
                            </select>
                        </div>

                        <button id="cashOutBtn" class="place-bet" style="display: none;">Encaisser</button>

                        <% } %>

                            <div class="game-option auto-settings" style="display: none;">
                                <div class="bet-amount-header">
                                    <label for="auto-count">Nombre de parties</label>
                                </div>
                                <div class="bet-input">
                                    <input id="auto-count" type="number" min="1" value="1" />
                                </div>
                            </div>


                            <button id="placeBetBtn" class="place-bet">Parier</button>
        </aside>

        <!-- 2 – Zone de jeu -->
        <main class="game-zone <%= game === 'tower' ? 'tower-bg' : '' %>">
            <%- body %>
        </main>
    </div>

    <!-- 3 – Bandeau d’options / logs -->
    <footer class="game-footer">
        <!-- logo Djelo -->
        <div id="footer-logo-container" class="footer-logo"></div>

    </footer>
</div>


<script>
    document.querySelectorAll('.mode-switch .mode-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            // virer l’ancienne sélection
            document.querySelector('.mode-switch .mode-btn.active')
                .classList.remove('active');
            // marquer la nouvelle
            btn.classList.add('active');

            // ici tu peux ajouter ton code pour passer en mode manuel/auto
            // ex : if (btn.dataset.mode === 'manuel') { … }
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // première passe au chargement
        updateBetInputIcon();

        // à chaque fois que tu cliques sur une option de crypto dans le header
        document.querySelectorAll('.solde-option').forEach(opt => {
            opt.addEventListener('click', () => {
                // (ton code existant change déjà l'icône du header)
                // on rafraîchit aussi l'input de mise :
                updateBetInputIcon();
            });
        });
    });
</script>

<script>
    // taux EUR injecté par le serveur
    window.betRate = <%= rate %>;

    function formatEUR(x) {
        return x.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' });
    }

    function updateEurValue() {
        const input = document.querySelector('.bet-input input');
        const eurSpan = document.querySelector('.bet-eur-value');
        const valCrypto = parseFloat(input.value.replace(',', '.')) || 0;
        eurSpan.textContent = formatEUR(valCrypto * window.betRate);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const input = document.querySelector('.bet-input input');
        updateEurValue();            // initial
        input.addEventListener('input', updateEurValue);
    });
</script>

<script>
    function updateBetInputIcon() {
        const src = document
            .querySelector('.solde-container .solde-crypto-icon')
            ?.getAttribute('src');
        if (!src) return;

        // Applique à l'input de pari
        document.querySelector('.bet-input')
            .style.setProperty('--crypto-icon-url', `url("${src}")`);

        // Applique au bloc gain potentiel
        document.querySelector('.potential-display')
            ?.style.setProperty('--crypto-icon-url', `url("${src}")`);
    }


    document.addEventListener('DOMContentLoaded', () => {
        // 1) initialisation
        updateBetInputIcon();
        updateEurValue();

        // 2) si l'utilisateur modifie le montant
        document.querySelector('.bet-input input')
            .addEventListener('input', updateEurValue);

        // 3) à chaque clic sur un choix de crypto dans le header
        document.querySelectorAll('.solde-option').forEach(opt => {
            opt.addEventListener('click', async () => {
                const symbol = opt.dataset.symbol.toLowerCase();

                // a) envoie en session
                await fetch('/set-symbol', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ symbol })
                });

                // b) mets à jour window.currentSymbol & betRate
                window.currentSymbol = symbol;
                window.betRate = window.allRates[symbol] || 1;

                // c) actualise l’UI
                // - header icon + amount : ton code existant
                const soldeBox = document.querySelector('.solde-container .solde-box');
                soldeBox.querySelector('.solde-amount').textContent = opt.dataset.amount.slice(0, 10);
                soldeBox.querySelector('.solde-crypto-icon').src = opt.dataset.icon;

                // - champ pari
                updateBetInputIcon();
                updateEurValue();
            });
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const modeButtons = document.querySelectorAll('.mode-switch .mode-btn');
        const autoSettings = document.querySelector('.auto-settings');
        const placeBetBtn = document.querySelector('.place-bet');

        modeButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                // 1) bascule du bouton actif
                document.querySelector('.mode-switch .mode-btn.active')
                    .classList.remove('active');
                btn.classList.add('active');

                // 2) affichage du champ “nombre de parties”
                if (btn.dataset.mode === 'auto') {
                    autoSettings.style.display = 'flex';
                    placeBetBtn.textContent = 'Lancer pari';
                } else {
                    autoSettings.style.display = 'none';
                    placeBetBtn.textContent = 'Parier';
                }
            });
        });
    })
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const btn = document.getElementById('placeBetBtn');

        if (!btn) {
            console.warn("Bouton non trouvé !");
            return;
        }

        btn.addEventListener('click', () => {
            console.log("Parier cliqué");
            window.dispatchEvent(new CustomEvent('placeBetClicked'));
        });

        window.addEventListener('placeBetClicked', () => {
            console.log("TETE"); // ← test log
            const placeholder = document.getElementById('gamePlaceholder');
            const iframe = document.getElementById('gameIframe');
            if (placeholder) placeholder.style.display = 'none';
            if (iframe) iframe.style.display = 'block';
        });
    });
</script>

<script>
    function loadFooterLogoSVG() {
        fetch('/images/djellylogo.svg') // chemin vers ton logo
            .then(res => res.text())
            .then(svg => {
                const container = document.getElementById('footer-logo-container');
                container.innerHTML = svg;

                // 👉 Sélectionne l'étoile et applique la rotation
                const star = container.querySelector('#footer-star'); // ID du groupe <g>
                if (star) {
                    star.classList.add('rotating-star');
                }
            });
    }

    document.addEventListener('DOMContentLoaded', loadFooterLogoSVG);
</script>